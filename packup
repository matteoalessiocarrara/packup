#!/usr/bin/bash
# Copyright 2016 - 2017 Matteo Alessio Carrara <sw.matteoac@gmail.com>


set -e
source /usr/local/lib/bash_colors # XXX ugly


function check_env_var()
{
	# These environment variables must be defined:
	# PACKUP_ROOT	where the backups are saved (WARNING: they must be in a dedicated/
	# 				empty directory or the script will not work. Furthermore, this
	#				must be the full path of the directory.)
	# PACKUP_FILES	files to copy

	if [[ -z $PACKUP_ROOT ]] || [[ -z $PACKUP_FILES ]]; then
		clr_red "The environment variables PACKUP_ROOT and PACKUP_FILES must be defined"
		exit 1
	fi
	if [[ ! -d $PACKUP_ROOT ]]; then
		clr_red "The \"$PACKUP_ROOT\" directory does not exist ($PACKUP_ROOT)"
		exit 1
	fi
}


function execute_hooks()
{
	if [[ $# -ne 1 ]]; then
		clr_red -n "$FUNCNAME: $LINENO: "; echo "incorrect number of arguments"
		exit 1
	else
		local HOOKS_DIR=$1
	fi

	if [[ -d $HOOKS_DIR ]]; then
		for f in $(ls $HOOKS_DIR); do
			. $HOOKS_DIR/$f
		done
	else
		warn "The hooks directory does not exist ($HOOKS_DIR)"
	fi
}


function find_old_backups()
{
	# oldest first
	# we are cutting the first line because is the directory itself
	find $PACKUP_ROOT -maxdepth 1 -type d | sed 1d | sort 
}


function main()
{
	check_env_var	
	
	
	# it is not an hidden directory because there are too many and you never know 
	# what to save in case of system reinstall
	local PRE_HOOKS_DIR=~/packup/pre
	local POST_HOOKS_DIR=~/packup/post
	
	local DEST="$PACKUP_ROOT/$(date --iso-8601=seconds)"
	local PREV_BKUP="$(find_old_backups | tail -n 1)"
	local HASH_FILE="$PACKUP_ROOT/hash"
	
	local OPT_CMD=$([[ -n $PREV_BKUP ]] && echo "--link-dest=$PREV_BKUP" || echo -n "")
	local RSYNC_FLAGS="--archive --relative --hard-links --human-readable --info=misc2,name,skip,stats,symsafe $OPT_CMD"

	
	[[ -n $PREV_BKUP ]] && inf "Found previous backup ($PREV_BKUP)"

	inf "Executing pre-backup scripts..."
	execute_hooks $PRE_HOOKS_DIR


	inf "Copying files..."
	mkdir $DEST
	rsync $RSYNC_FLAGS ${PACKUP_FILES[@]} $DEST  || true
	# Ignore error 23: partial transfer due to error
	[[ $? -ne 0 ]] && [[ $? -ne 23 ]] && exit 1
	
	inf "Computing hashes..."
	# New files have only one hardlink, while older files have a link for this 
	# backup and 1+ for the old backups. User-created hardlink are detected below.
	local oaf=`find $DEST -type f -links 1 -printf '"%p"\n'`
	[[ -n $oaf ]] && echo $oaf | xargs md5sum >> $HASH_FILE
	
	# If the files with more than one hardlink are external to this backup,
	# then the hash has already been calculated in the old backup
	readarray -t a < <(find $DEST -type f -not -links 1)
	for f in $a; do
		need_hash="true"
		readarray -t b < <(find $PACKUP_ROOT -samefile "$f")
		for ff in $b; do
			if [[ ! $(realpath "$ff") == $(realpath $DEST)* ]]; then
				need_hash="false"
				break
			fi
		done
		[[ $need_hash == "true" ]] && md5sum "$f" >> $HASH_FILE
	done
	
	inf "Executing post-backup scripts..."
	execute_hooks $POST_HOOKS_DIR
	
	inf "Backup finished"
}


main
