#!/usr/bin/bash
#
#  Copyright 2016 Matteo Alessio Carrara <sw.matteoac@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

set -e
source /usr/local/lib/bash_colors



# TODO Controlli integrità periodici / hash files
# TODO I backup dovrebbero essere read only



function check_env_var()
{
	# Devono essere definite queste variabili d'ambiente
	#
	# PACKUP_ROOT	dove vengono salvati i backup (e solo quelli!!)
	# PACKUP_FILES	files da copiare

	# Possono essere definite queste variabili d'ambiente
	#
	# PACKUP_CONST	file che saranno copiati una sola volta e successive modifiche
	# 				saranno ignorate (attenzione, NON devono essere anche
	#				in PACKUP_FILES)
	# CHECK_CONST	se definita, controlla che i file di PACKUP_CONST non siano 
	#				anche in PACKUP_FILES  

	if [[ -z $PACKUP_ROOT ]] || [[ -z $PACKUP_FILES ]]
	then
		clr_red "Le variabili d'ambiente PACKUP_ROOT e PACKUP_FILES devono essere definite"
		exit 1
	fi
}


function execute_hooks()
{
	HOOKS_DIR=$1

	if [[ -z $HOOKS_DIR ]]
	then
		clr_red -n "$FUNCNAME: $LINENO: "; echo "parametri scorretti"
		exit 1
	fi

	if [[ -d $HOOKS_DIR ]]
	then
		for f in $(ls $HOOKS_DIR)
		do
			. $HOOKS_DIR/$f
		done
	else
		warn "La directory degli hooks è inesistente ($HOOKS_DIR)"
	fi
}


function check_const_files()
{
	local files="/tmp/packup-files-$(pwd | md5sum | cut -d ' ' -f1)"
	local const="/tmp/packup-const-$(pwd | md5sum | cut -d ' ' -f1)"
	
	printf '%s\n' "${PACKUP_FILES[@]}" | sort > $files
	printf '%s\n' "${PACKUP_CONST[@]}" | sort > $const
	
	intersect="$(comm -1 -2 $files $const)"
	
	rm -f $files $const

	if [[ -n $intersect ]]
	then
		clr_red "I seguenti file sono definiti sia come file normali che come file costanti:"
		echo $intersect
		exit 1
	fi
}


function main()
{
	check_env_var

	PRE_HOOKS_DIR=~/packup/pre
	POST_HOOKS_DIR=~/packup/post
	DEST="$PACKUP_ROOT/$(date --iso-8601=seconds)"
	PREV_BKUP="$(ls $PACKUP_ROOT | sort | tail -n 1)"
	OPT_CMD=$([[ -n $PREV_BKUP ]] && echo "--link-dest=$PACKUP_ROOT/$PREV_BKUP" || echo -n "")
	RSYNC_FLAGS="--archive --relative --hard-links --human-readable	--info=misc2,name,skip,stats,symsafe $OPT_CMD"


	[[ -n $PREV_BKUP ]] && inf Individuato backup precedente \($PREV_BKUP\)

	inf "Esecuzione degli script di pre-backup..."
	execute_hooks $PRE_HOOKS_DIR

	[[ -n $PACKUP_CONST ]] && [[ -n $CHECK_CONST ]] && check_const_files


	mkdir $DEST
	
	inf "Copia dei file..."
	rsync $RSYNC_FLAGS $PACKUP_FILES $DEST
	
	if [[ -n $PACKUP_CONST ]]
	then
		inf "Copia dei file immutabili..."
		rsync $RSYNC_FLAGS --ignore-existing $PACKUP_CONST $DEST
	fi


	inf "Esecuzione degli script di post-backup.."
	execute_hooks $POST_HOOKS_DIR
	
	inf "Backup terminato"
}


main
